import type { ConfigFileOptions, PackageGlobOptions, PackageOptions } from "./types";
/**
 * Remove duplicates from an array.
 *
 * @param arr - the array to remove duplicates from
 * @returns
 */
export declare function unique<T>(arr: T[]): T[];
/**
 * Remove prefix and querystrings from the module path.
 * When using node: prefix, we should remove it.
 * Some imports may have querystrings, for example:
 *  * import "foo?bar";
 *
 * @param {string} modulePath the import module path
 *
 * @retures {string} cleaned source
 */
export declare function cleanModulePath(modulePath: string): string;
/**
 * Normalize patterns to include all possible package descriptor files.
 *
 * @param patterns - the patterns to normalize
 * @returns the normalized patterns
 */
export declare function normalizePatterns(patterns: string[]): string[];
/**
 * Get the depth of a path.
 *
 * @param p {string} - the path
 * @returns {number} - the depth of the path
 */
export declare function getPathDepth(p: string): number;
/**
 * Sort paths by the depth of the path. The deeper the path, the higher the priority.
 *
 * @param paths - the paths to sort
 * @returns
 */
export declare function sortPaths(paths: string[]): string[];
/**
 * Read a yaml file.
 *
 * @param filePath {string} - the file path to read
 * @returns {T | null} - the parsed yaml file
 */
export declare function readYamlFile<T>(filePath: string): T | null;
/**
 * Normalize package glob options.
 *
 * @param opts {PackageOptions | string[]} - the package options
 * @param root {string} - the root path
 * @returns {PackageGlobOptions} - the normalized package glob options
 */
export declare function normalizePackageGlobOptions(opts: PackageOptions | string[], root: string): PackageGlobOptions;
/**
 *
 * Copy from https://github.com/pnpm/pnpm/blob/19d5b51558716025b9c32af16abcaa009421f835/fs/find-packages/src/index.ts
 *
 * @param root
 * @param opts
 * @returns
 */
export declare function findAllPackages(root: string, packageOpts: PackageOptions | string[]): string[];
/**
 * Find the closest package from the source file.
 *
 * @param sourceFile {string} - the source file
 * @param paths {string[]} - the paths to search
 * @returns {string | undefined} - the closest package root
 */
export declare function findClosestPackageRoot(sourceFile: string, paths: string[]): string | undefined;
export declare function findClosestConfigFile(sourceFile: string, configFiles: string[], tsconfigFilename?: string): string | undefined;
export declare function getConfigFilename(config: boolean | string | ConfigFileOptions | undefined, defaultFilename: string): string | undefined;
export declare function normalizeConfigFileOptions(configs: Record<"tsconfig" | "jsconfig", boolean | string | ConfigFileOptions | undefined>, packageDir: string, sourceFile: string): ConfigFileOptions | undefined;
export declare function normalizeAlias(alias: Record<string, string | string[]> | undefined, parent: string): Record<string, string[]> | undefined;
/**
 * Get the hash of an object.
 *
 * @param obj {unknown} - the object to hash
 * @returns - the hash of the object
 */
export declare function hashObject(obj: unknown): string;
/**
 * Find all workspace packages.
 *
 * @param roots {string[]} - the roots to search
 * @param packages {string[] | PackageOptions} - the package options
 * @returns {string[]} - the workspace packages
 */
export declare function findWorkspacePackages(roots: string[], packages?: string[] | PackageOptions): string[];
